- hosts: nixpis
  become: true

  gather_facts: false
  pre_tasks:
  - name: always gather facts for all nixpi hosts
    import_role:
      name: gather-facts
    vars:
      for_hosts: "{{ groups['nixpis'] }}"

  tasks:
  - name: "ensure config was generated for the first time"
    command:
      creates: "{{ nixos_configuration_dir }}/*.nix"
      argv:
      - nixos-generate-config

  - name: "ensure {{ nixos_configuration_candidate_dir }}"
    file:
      state: "{{ item }}"
      dest: "{{ nixos_configuration_candidate_dir }}"
      force: true
    loop:
    - absent
    - directory

  - name: "render {{ source_configs_dir }} to {{ nixos_configuration_candidate_dir }}"
    template:
      dest: "{{ nixos_configuration_candidate_dir }}/{{ item }}"
      src: "{{ source_configs_dir }}/{{ item }}"
      force: true
      validate: "nix-instantiate --parse-only '%s'"
    loop: "{{ source_config_files }}"

  - name: "check nixos channel"
    command:
      argv:
      - nix-channel
      - --list
    register: old_channels
    changed_when: False

  - name: "set up nix channels"
    command:
      argv:
      - nix-channel
      - --add
      - "{{ item.url }}"
      - "{{ item.name }}"
    when: |-
      "{{ item.name }} {{ item.url }}" not in old_channels.stdout_lines
    loop:
    - { name: nixos , url: "https://nixos.org/channels/{{ nixos_channel }}" }

  - name: "nix-channel --update"
    command:
      argv:
      - nix-channel
      - --update
    register: channel_update
    changed_when: (channel_update.stdout + channel_update.stderr).strip() != 'unpacking channels...'

  - when: True
    block:
    - name: ensure old files are deleted
      file:
        path: "{{ item }}"
        state: absent
      loop:
      - result
      - /boot/old

    - name: build candidate configuration
      include_role:
        name: cmd
      vars:
        argv:
        - nixos-rebuild
        - -I
        - "nixos-config={{ nixos_configuration_candidate_dir }}/configuration.nix"
        - build

    - name: activate candidate configuration
      include_role:
        name: cmd
      vars:
        argv:
        - nixos-rebuild
        - -I
        - "nixos-config={{ nixos_configuration_candidate_dir }}/configuration.nix"
        - test

    - name: make the new configuration boot default
      include_role:
        name: cmd
      vars:
        argv:
        - nixos-rebuild
        - -I
        - "nixos-config={{ nixos_configuration_candidate_dir }}/configuration.nix"
        - switch

    - name: store as new configuration
      copy:
        dest: "{{ nixos_configuration_dir }}/configuration.nix"
        remote_src: true
        src: "{{ nixos_configuration_candidate_dir }}/configuration.nix"
        force: true
        backup: true
      register: new_configuration

    - name: symlink old configuration to configuration.previous.nix
      file:
        state: link
        dest: "{{ nixos_configuration_dir }}/configuration.previous.nix"
        src: "{{ new_configuration.backup_file }}"
        force: true

    rescue:
    - name: rollback channel update
      when: channel_update.changed
      command:
        argv:
        - nix-channel
        - --rollback
    - name: fail after update rollback
      fail: { }
