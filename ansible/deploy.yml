- hosts: nixpis
  become: true

  gather_facts: false
  pre_tasks:
  - name: always gather facts for all nixpi hosts
    import_role:
      name: gather-facts
    vars:
      for_hosts: "{{ groups['nixpis'] }}"

  tasks:
  - name: "ensure config was generated for the first time"
    command:
      creates: "{{ nixos_configuration_dir }}/*.nix"
      argv:
      - nixos-generate-config

  - name: "ensure {{ nixos_configuration_candidate_dir }} exists"
    file:
      state: "directory"
      dest: "{{ nixos_configuration_candidate_dir }}"
      force: true

  - name: "render {{ source_configs_dir }} to {{ nixos_configuration_candidate_dir }}"
    template:
      dest: "{{ nixos_configuration_candidate_dir }}/{{ item }}"
      src: "{{ source_configs_dir }}/{{ item }}"
      force: true
      validate: "nix-instantiate --parse-only '%s'"
    loop: "{{ source_config_files }}"
    register: rendered_configs

  - name: "check nixos channel"
    command:
      argv:
      - nix-channel
      - --list
    register: old_channels
    changed_when: False

  - name: "set up nix channels"
    command:
      argv:
      - nix-channel
      - --add
      - "{{ item.url }}"
      - "{{ item.name }}"
    when: |-
      '{} {}'.format(item.name, item.url) not in old_channels.stdout_lines
    loop:
    - { name: nixos , url: "https://nixos.org/channels/{{ nixos_channel }}" }

  - name: "nix-channel --update"
    command:
      argv:
      - nix-channel
      - --update
    register: channel_update
    changed_when: (channel_update.stdout + channel_update.stderr).strip() != 'unpacking channels...'

  - when: True
    block:
    - name: ensure old files are deleted
      file:
        path: "{{ item }}"
        state: absent
      loop:
      - result
      - /boot/old

    - name: build candidate configuration
      include_role:
        name: cmd
      vars:
        argv:
        - nixos-rebuild
        - -I
        - "nixos-config={{ nixos_configuration_candidate_dir }}/configuration.nix"
        - build

    - name: activate candidate configuration
      include_role:
        name: cmd
      vars:
        argv:
        - nixos-rebuild
        - -I
        - "nixos-config={{ nixos_configuration_candidate_dir }}/configuration.nix"
        - test

    rescue:
    - name: rollback channel update
      when: channel_update.changed
      command:
        argv:
        - nix-channel
        - --rollback
    - name: fail after update rollback
      fail: { }

  - name: make the new configuration boot default
    include_role:
      name: cmd
    vars:
      argv:
      - nixos-rebuild
      - -I
      - "nixos-config={{ nixos_configuration_candidate_dir }}/configuration.nix"
      - switch

  - name: get current nixos system generation
    stat:
      path: /nix/var/nix/profiles/system
    register: nixos_current_generation

  - name: create new configuration directory
    file:
      state: "directory"
      dest: "{{ nixos_configuration_dir }}/configuration.d/{{ nixos_current_generation.stat.lnk_target }}"
      force: true
    register: nixos_new_configuration_dir

  - name: copy-over configuration files
    copy:
      remote_src: true
      src: "{{ nixos_configuration_candidate_dir }}/{{ item.item }}"
      dest: "{{ nixos_new_configuration_dir.path }}/{{ item.item }}"
    loop: "{{ rendered_configs.results }}"

  - name: link as a new configuration
    file:
      state: link
      src: "{{ nixos_new_configuration_dir.path }}/configuration.nix"
      dest: "{{ nixos_configuration_dir }}/configuration.nix"
      force: true
    register: new_configuration
